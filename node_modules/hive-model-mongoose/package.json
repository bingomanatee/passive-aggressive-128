{
  "name": "hive-model-mongoose",
  "version": "0.0.2",
  "description": "A model class that merged mongoose with the hive-model structure",
  "main": "index.js",
  "dependencies": {
    "hive-component": "~0.0.1",
    "underscore": "~1.4.3",
    "tap": "~0.3.3",
    "async": "~0.1.22",
    "gate": "~0.3.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "tests/test_mongoose_model.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bingomanatee/hive-model-mongoose.git"
  },
  "keywords": [
    "mongoose",
    "hive"
  ],
  "author": {
    "name": "David Edelhart"
  },
  "license": "BSD",
  "readme": "Hive-model-mongoose\n===================\n\nHive-model-mongoose is a superclass for mongoose model. It exists for several purposes:\n\n1) to create a more REST-like API for the mongoose model methods\n2) to insulate all of the mongoose model methods from your particular model class to reduce namespace collision.\n3) to bundle a set of features with all models, including archiving and soft deletion\n\nNote that in hive-model-mongoose, the assumption is that the models functions, not the records' native functions,\nare called.\n\nAdded Functionality\n-------------------\n\nAll models have \"soft deletion\" built in to the delete method. if Model.delete(record, callback, true) is called,\nthe models' delete flag is set to true, but the record itself is preserved.\n\nAlso, you can archive your data -- clone its properties into an _archive array - if you include the property\n_archive ['mixed'] in your schema. This is a handy way to \"back up\" your data before updating it.\n\nAPI\n---\n\nHive_Model_Mongoose is a hive-component (https://github.com/bingomanatee/hive-component). Instances have the mongoose\nModel in their `model` property.\n\n### Constructor\n\nMongoose_Model is a factory that returns the mongoose_model via callback (and directly).\n\n``` javascript\n\nMongoose_Model(\n    {\n        name: 'tribbles'\n    } // mixins\n    , {\n        mongoose:   mongoose,\n        schema_def: object || mongoose.Schema || path_to.jso\n    } // configurations\n    , dataspace // hive-model.Dataspace || Object (optional)\n    , callback (optional)\n    );\n\n```\n\n#### Mixins {object}\n\nAny methods you want to attach to the model go here. The only requirement is the name property,\nwhich must be a unique string (unique to your database/the dataspace)\n\n#### Configuration {Object}\n\nas a hive-component, a hive-model has a configuration registry that can be accessed with\n* model.get_config(key):value,\n* model.set_config(key, value)\n* model.has_config(key):boolean\n\nThere are two required configurations:\n1. mongoose -- an instance of your Mongoose module\n2. schema_def -- either a Mongoose Schema, an object, or a path to a JSON file.\n\n#### Dataspace {hive-model.Dataspace || Objet}\n\nDataspace can be a formal model registry (as part of the [hive-model](https://github.com/bingomanatee/hive-model) system)\nor a basic object that you want to use to collect your models by name. You can pass a naked object {} in as well.\n\n#### Callback function(err, my_mongoose_model)\n\na function that returns the model.\n\n### add([records] {array}, callback{function}, as_group{boolean});\n\nAdds a series of objects to the collection. Can be raw objects, Documents, or a combination.\nIf records is not an array, it routes to put(..).\nIf as_group != true, it feeds records one at a time to put and returns the aggregate results to the callback.\nIf it is true, it uses this.model.collection.insert -- meaning no property validation is done,\n and the callback will not receive the new documents.\n\n### put ( doc {mongoose.Document || Object}, options {object}, callback {function}) || (doc, callback)\n### post \" \"\n\nInserts or updates a single document.\n\n### get (id, fields, options, callback)\n\nGets a single document, by ID; a passthrough to findById.\n\n### revise(data {object}, callback{function})\nupdate a single document's selected fields. data must have an _id property.\nThe other fields update the content of the object on a field by field basis.\n\n*  if your data has a __REMOVE property, whose values are an array of strings, those properties are removed\nfrom the document. However if the property is an array, it is emptied rather than deleted.\n\n### all(callback {function} [optional])\n\nreturns the entire collection in the callback, or a query.\n\n### active(callback {function} [optional])\n\nreturns the records collection in the callback, or a query. Respects soft deletes.\n\n### inactive(callback {function} [optional])\n\nreturns the soft-deleted records in the collection in the callback, or a query.\n\n\n### find (crit, field, options, callback)\n\npassthrough to Mongoose Model.find\n\n### find_one (crit, field, options, callback)\n\npassthrough to Mongoose Model.findOne\n\n### count()\n\npassthrough to Mongoose Model.count\n\n### empty()\n\ndrops the entire collection\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bingomanatee/hive-model-mongoose/issues"
  },
  "_id": "hive-model-mongoose@0.0.2",
  "dist": {
    "shasum": "ea411daf9127a20c4122b4cad18e04767035cf32"
  },
  "_from": "hive-model-mongoose@0.0.2",
  "_resolved": "https://registry.npmjs.org/hive-model-mongoose/-/hive-model-mongoose-0.0.2.tgz"
}
